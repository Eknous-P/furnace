/*
bleh system
(bichannel linearly enhanced harmonics)

specs:
2 channels of wave or noise (or both, binary AND mixing)
up to 4 waves, comes from an ext. rom
the channels can modulate each other (phase modulation)
8 step attenuation control

the rom:
max: 4*256*8 bit
recommended multiple of 256*8 bit (then wave nums will repeat)
waves stored one after another, 256x256

can run without rom (address connected to data)

register map:
--|00 01 02 03 04 05 06 07|
00|C1FRQ|C2PRQ|S1|S2|N1|N2|

S1,S2 - channel state
bit 7 6 5 4 3 2 1 0
    | | | \ / \   /
    | | |  |  atten.
    | | | wave
    | | pm enable
    | wave enable
    noise enable

N1,N2 - noise frequency
*/

#ifdef INCLUDE_BLEH_ROM_V0
#ifndef BLEHROM_V0
#define BLEHROM_V0
static const unsigned char blehROM_V0[1024] = {
  0x0e, 0x0f, 0x10, 0x12, 0x12, 0x13, 0x15, 0x16, 0x17, 0x18, 0x1a, 0x1b,
  0x1d, 0x1e, 0x1f, 0x1f, 0x20, 0x1f, 0x12, 0x10, 0x0a, 0x05, 0x04, 0x07,
  0x08, 0x12, 0x14, 0x16, 0x18, 0x1d, 0x1f, 0x22, 0x09, 0x0e, 0x13, 0x16,
  0x17, 0x31, 0x31, 0x2b, 0x29, 0x27, 0x24, 0x1c, 0x1a, 0x18, 0x07, 0x0c,
  0x0e, 0x10, 0x1e, 0x20, 0x22, 0x45, 0x41, 0x39, 0x39, 0x56, 0x58, 0x5a,
  0x5c, 0x5e, 0x5f, 0x5f, 0x60, 0x61, 0x68, 0x67, 0x64, 0x5b, 0x5e, 0x60,
  0x63, 0x65, 0x70, 0x78, 0x7b, 0x80, 0x79, 0x78, 0x77, 0x70, 0x6f, 0x6d,
  0x6c, 0x6a, 0x6b, 0x7b, 0x7c, 0x7e, 0x7f, 0x81, 0x83, 0x83, 0x84, 0x84,
  0x65, 0x64, 0x63, 0x62, 0x61, 0x5e, 0x5d, 0x69, 0x68, 0x65, 0x62, 0x71,
  0x75, 0x8f, 0x90, 0x90, 0x90, 0x8f, 0x8c, 0x8b, 0x8a, 0x89, 0x87, 0x85,
  0x84, 0x83, 0x81, 0x80, 0x80, 0x80, 0x82, 0x85, 0x86, 0x87, 0x88, 0x89,
  0x8d, 0x8f, 0x90, 0x95, 0x96, 0x96, 0x97, 0x97, 0x97, 0x96, 0xc5, 0xc8,
  0xc8, 0xc1, 0xbe, 0xbb, 0xba, 0xb7, 0xb6, 0xb1, 0xab, 0xa6, 0xa2, 0x9e,
  0x9a, 0x95, 0x8b, 0x6e, 0x70, 0xbe, 0xb7, 0xb5, 0xb1, 0xaf, 0xad, 0xab,
  0xa9, 0xa6, 0x7e, 0x80, 0xcb, 0xca, 0x9c, 0x98, 0x91, 0x8d, 0x79, 0x66,
  0x68, 0x6a, 0x6c, 0x71, 0x73, 0x75, 0x7b, 0x80, 0x88, 0x98, 0x9d, 0xa1,
  0xb5, 0xb7, 0xb6, 0xaf, 0xad, 0xa8, 0xa2, 0x9e, 0x9a, 0x96, 0x89, 0x87,
  0x84, 0x81, 0x7f, 0x7c, 0x78, 0x75, 0x73, 0x71, 0xce, 0xcd, 0xc6, 0xc4,
  0xc2, 0x7b, 0x77, 0x74, 0x6f, 0x62, 0x5c, 0x5b, 0x5a, 0x56, 0x51, 0x53,
  0x57, 0x58, 0x6b, 0xb2, 0xb4, 0xe4, 0xeb, 0xec, 0xef, 0xf0, 0x24, 0x20,
  0x1b, 0x19, 0x18, 0xc3, 0xc3, 0xc3, 0xbc, 0xbb, 0xb8, 0x4e, 0x4d, 0x43,
  0x3d, 0x08, 0x02, 0x01, 0xb3, 0xb2, 0xb1, 0xb1, 0xaf, 0xaf, 0xae, 0xad,
  0xad, 0xac, 0xab, 0xaa, 0xa9, 0xa8, 0xa4, 0xa4, 0xa2, 0xa0, 0xa0, 0x9e,
  0x9c, 0x9a, 0x99, 0x98, 0x97, 0x96, 0x96, 0x96, 0x94, 0x92, 0x90, 0x8d,
  0x88, 0x86, 0x84, 0x81, 0x80, 0x80, 0x7e, 0x7c, 0x7a, 0x79, 0x77, 0x75,
  0x72, 0x6d, 0x6a, 0x68, 0x66, 0x5b, 0x5a, 0x4f, 0x4e, 0x4a, 0x45, 0x43,
  0x43, 0x40, 0x3f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3d, 0x3c, 0x3c, 0x3c, 0x3d,
  0x3d, 0x3e, 0x3f, 0x42, 0x45, 0x45, 0x47, 0x4e, 0x56, 0x59, 0x5a, 0x5c,
  0x5d, 0x5e, 0x5f, 0x64, 0x67, 0x70, 0x71, 0x78, 0x79, 0x7d, 0x7f, 0x80,
  0x81, 0x83, 0x85, 0x89, 0x8b, 0x8d, 0x8f, 0x91, 0x93, 0x95, 0x98, 0x98,
  0x99, 0x9a, 0x9b, 0x9c, 0x9e, 0x9e, 0xa0, 0xa1, 0xa1, 0xa3, 0xa5, 0xa6,
  0xa8, 0xa8, 0xa9, 0xaa, 0xac, 0xac, 0xac, 0xac, 0xab, 0xa9, 0xa8, 0xa6,
  0xa5, 0xa4, 0xa3, 0xa2, 0xa1, 0xa0, 0x9e, 0x9d, 0x9d, 0x9c, 0x9b, 0x99,
  0x98, 0x96, 0x95, 0x93, 0x92, 0x90, 0x8d, 0x8c, 0x8a, 0x88, 0x86, 0x84,
  0x80, 0x7f, 0x7d, 0x7c, 0x7b, 0x79, 0x76, 0x74, 0x73, 0x71, 0x70, 0x6f,
  0x6c, 0x6b, 0x6a, 0x68, 0x67, 0x66, 0x64, 0x61, 0x60, 0x5f, 0x5e, 0x5c,
  0x5b, 0x58, 0x57, 0x56, 0x55, 0x53, 0x52, 0x50, 0x4f, 0x4e, 0x4d, 0x4b,
  0x4a, 0x49, 0x46, 0x43, 0x42, 0x44, 0x46, 0x47, 0x4b, 0x4d, 0x4e, 0x4f,
  0x51, 0x52, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5b, 0x5c, 0x5d, 0x5e,
  0x5f, 0x60, 0x61, 0x63, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x70, 0x72, 0x74,
  0x75, 0x7a, 0x7b, 0x7f, 0x7f, 0x81, 0x83, 0x83, 0x85, 0x87, 0x8a, 0x8c,
  0x8f, 0x90, 0x91, 0x91, 0x95, 0x96, 0x97, 0x98, 0x9a, 0x9c, 0xa1, 0xa4,
  0xa4, 0xa5, 0xa7, 0xa9, 0xab, 0xad, 0xae, 0xaf, 0xb2, 0xb3, 0xb3, 0xb7,
  0xb8, 0xb9, 0xba, 0xba, 0xbb, 0xbe, 0xbf, 0xc0, 0xc0, 0xc1, 0xc2, 0xc3,
  0xc4, 0xc5, 0xc6, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcc, 0xcd,
  0xcf, 0xcf, 0xd0, 0xd0, 0xd1, 0xd2, 0xd3, 0xd3, 0xd4, 0xd4, 0xd5, 0xd5,
  0xd7, 0xd7, 0xd8, 0xd8, 0xd9, 0xd9, 0xdb, 0xdc, 0xdd, 0xdd, 0xde, 0xdf,
  0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe3, 0xe4, 0xe6, 0xe7, 0xe8, 0xe8, 0xe9,
  0xe9, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf0, 0xf2, 0xf3, 0xf4, 0xf4,
  0xf5, 0xf6, 0xf8, 0xfa, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xfe, 0xfe, 0xfe,
  0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfb, 0xfb,
  0xf8, 0xf8, 0xf6, 0xf4, 0xf2, 0xf0, 0xef, 0xec, 0xde, 0xdb, 0xcb, 0xca,
  0xc6, 0xc1, 0xbf, 0xb9, 0xb2, 0xa1, 0x57, 0x57, 0x4a, 0x45, 0x2d, 0x29,
  0x29, 0x25, 0x1e, 0x1d, 0x13, 0x13, 0x11, 0x0e, 0x0d, 0x0b, 0x0b, 0x0a,
  0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
  0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07,
  0x0a, 0x0a, 0x0b, 0x0b, 0x0c, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14,
  0x16, 0x17, 0x18, 0x19, 0x1b, 0x1b, 0x1d, 0x1f, 0x21, 0x22, 0x23, 0x27,
  0x28, 0x2d, 0x2e, 0x30, 0x35, 0x36, 0x3a, 0x40, 0x46, 0x4b, 0x4d, 0x51,
  0x59, 0x5d, 0x60, 0x61, 0x64, 0x67, 0x68, 0x6b, 0x80, 0x81, 0x83, 0x84,
  0x85, 0x8c, 0x8f, 0x90, 0x91, 0x91, 0x92, 0x94, 0x95, 0x98, 0x99, 0x9a,
  0x9c, 0x9d, 0x9e, 0xa0, 0xa1, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
  0xa8, 0xa9, 0xa9, 0xaa, 0xab, 0xab, 0xac, 0xad, 0xad, 0xae, 0xaf, 0xaf,
  0xaf, 0xb1, 0xb1, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb5, 0xb6, 0xb6, 0xb7,
  0xb9, 0xc1, 0xc6, 0xcc, 0xd5, 0xda, 0xdb, 0xdf, 0xe4, 0xe5, 0xdb, 0xde,
  0xb5, 0xb3, 0x95, 0x94, 0x92, 0x91, 0xc4, 0xcc, 0xd0, 0xd0, 0xd2, 0xd6,
  0xd8, 0xdb, 0xdc, 0xdd, 0x98, 0x96, 0x96, 0x98, 0x98, 0x9d, 0xbb, 0xbc,
  0xdf, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xd9, 0xdb, 0xa9, 0xab, 0xaf, 0xb4,
  0xb7, 0xbd, 0xc2, 0xc7, 0xca, 0xcd, 0xd4, 0xe6, 0xe7, 0xe7, 0x9d, 0x9c,
  0x9a, 0x92, 0xdd, 0xe0, 0xee, 0xc3, 0xc0, 0xbd, 0xa0, 0x9d, 0xdb, 0xd7,
  0xd1, 0xcd, 0xc0, 0xbf, 0xbd, 0xba, 0xb8, 0xb0, 0xa3, 0xa0, 0x9f, 0xa0,
  0xa2, 0xa7, 0xa9, 0xad, 0xb0, 0xc1, 0xc3, 0xc6, 0xcd, 0xd3, 0xd5, 0xc3,
  0xc0, 0xbe, 0xbd, 0xb5, 0xb3, 0xb3, 0xb2, 0xb3, 0xb3, 0xb8, 0xc0, 0xc2,
  0xc7, 0xdf, 0xdf, 0xca, 0xb1, 0xaf, 0xb1, 0xb6, 0xb8, 0xc5, 0xcb, 0xce,
  0xd0, 0xd5, 0xd8, 0xd9, 0xdb, 0xe4, 0xe2, 0xab, 0xaf, 0xb1, 0xb8, 0xbe,
  0xc0, 0xc2, 0xc3, 0xca, 0xcc, 0xd0, 0xd3, 0xd4, 0xd7, 0xd9, 0xd9, 0xd9,
  0xd9, 0xbc, 0xbb, 0xb9, 0xbb, 0xbd, 0xbf, 0xc0, 0xc5, 0xc6, 0xcc, 0xc0,
  0xba, 0xb7, 0xb8, 0xbe, 0xc3, 0xc4, 0xcc, 0xce, 0xcd, 0xc7, 0xbf, 0xc0,
  0xc3, 0xc7, 0xca, 0xcb, 0xcc, 0xcc, 0xcb, 0xc8, 0xc8, 0xc6, 0xbc, 0xba,
  0xb9, 0xb7, 0xb5, 0xb4, 0xb2, 0xa9, 0xa9, 0xa3, 0xa2, 0xa1, 0xa0, 0x9d,
  0x9d, 0x9c, 0x97, 0x95, 0x93, 0x93, 0x90, 0x8a, 0x88, 0x85, 0x84, 0x81,
  0x74, 0x73, 0x6b, 0x6a, 0x60, 0x5e, 0x5c, 0x56, 0x46, 0x3e, 0x1c, 0x1b,
  0x17, 0x0f, 0x0e, 0x08, 0x07, 0x04, 0x03, 0x03, 0x03, 0x03, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0x08, 0x08, 0x13, 0x13,
  0x18, 0x1e, 0x1f, 0x40, 0x4e, 0x53, 0x5f, 0x5f, 0x65, 0x79, 0x9e, 0xa5,
  0xa6, 0xac, 0xad, 0xad
};
#endif
#endif

#ifdef INCLUDE_BLEH_ROM_V1
#ifndef BLEHROM_V1
#define BLEHROM_V1
static const unsigned char blehROM_V1[1024] = {
  0x80, 0x83, 0x86, 0x89, 0x8c, 0x8f, 0x92, 0x95, 0x98, 0x9c, 0x9f, 0xa2,
  0xa5, 0xa8, 0xab, 0xae, 0xb0, 0xb3, 0xb6, 0xb9, 0xbc, 0xbf, 0xc1, 0xc4,
  0xc7, 0xc9, 0xcc, 0xce, 0xd1, 0xd3, 0xd5, 0xd8, 0xda, 0xdc, 0xde, 0xe0,
  0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xed, 0xef, 0xf0, 0xf2, 0xf3, 0xf4,
  0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfc, 0xfd, 0xfe, 0xfe, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe,
  0xfd, 0xfc, 0xfc, 0xfb, 0xfa, 0xf9, 0xf8, 0xf7, 0xf6, 0xf5, 0xf3, 0xf2,
  0xf0, 0xef, 0xed, 0xec, 0xea, 0xe8, 0xe6, 0xe4, 0xe3, 0xe1, 0xde, 0xdc,
  0xda, 0xd8, 0xd6, 0xd3, 0xd1, 0xce, 0xcc, 0xc9, 0xc7, 0xc4, 0xc1, 0xbf,
  0xbc, 0xb9, 0xb6, 0xb4, 0xb1, 0xae, 0xab, 0xa8, 0xa5, 0xa2, 0x9f, 0x9c,
  0x99, 0x96, 0x92, 0x8f, 0x8c, 0x89, 0x86, 0x83, 0x80, 0x7d, 0x79, 0x76,
  0x73, 0x70, 0x6d, 0x6a, 0x67, 0x64, 0x61, 0x5e, 0x5b, 0x58, 0x55, 0x52,
  0x4f, 0x4c, 0x49, 0x46, 0x43, 0x41, 0x3e, 0x3b, 0x39, 0x36, 0x33, 0x31,
  0x2e, 0x2c, 0x2a, 0x27, 0x25, 0x23, 0x21, 0x1f, 0x1d, 0x1b, 0x19, 0x17,
  0x15, 0x14, 0x12, 0x10, 0x0f, 0x0d, 0x0c, 0x0b, 0x09, 0x08, 0x07, 0x06,
  0x05, 0x04, 0x03, 0x03, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04,
  0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0c, 0x0d, 0x0e, 0x10, 0x12, 0x13,
  0x15, 0x17, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x23, 0x25, 0x27, 0x29, 0x2c,
  0x2e, 0x30, 0x33, 0x35, 0x38, 0x3b, 0x3d, 0x40, 0x43, 0x46, 0x48, 0x4b,
  0x4e, 0x51, 0x54, 0x57, 0x5a, 0x5d, 0x60, 0x63, 0x66, 0x69, 0x6c, 0x6f,
  0x73, 0x76, 0x79, 0x7c, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e,
  0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26,
  0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
  0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56,
  0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e,
  0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86,
  0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
  0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6,
  0xb8, 0xba, 0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce,
  0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6,
  0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
  0xff, 0xfe, 0xfc, 0xfa, 0xf8, 0xf6, 0xf4, 0xf2, 0xf0, 0xee, 0xec, 0xea,
  0xe8, 0xe6, 0xe4, 0xe2, 0xe0, 0xde, 0xdc, 0xda, 0xd8, 0xd6, 0xd4, 0xd2,
  0xd0, 0xce, 0xcc, 0xca, 0xc8, 0xc6, 0xc4, 0xc2, 0xc0, 0xbe, 0xbc, 0xba,
  0xb8, 0xb6, 0xb4, 0xb2, 0xb0, 0xae, 0xac, 0xaa, 0xa8, 0xa6, 0xa4, 0xa2,
  0xa0, 0x9e, 0x9c, 0x9a, 0x98, 0x96, 0x94, 0x92, 0x90, 0x8e, 0x8c, 0x8a,
  0x88, 0x86, 0x84, 0x82, 0x80, 0x7e, 0x7c, 0x7a, 0x78, 0x76, 0x74, 0x72,
  0x70, 0x6e, 0x6c, 0x6a, 0x68, 0x66, 0x64, 0x62, 0x60, 0x5e, 0x5c, 0x5a,
  0x58, 0x56, 0x54, 0x52, 0x50, 0x4e, 0x4c, 0x4a, 0x48, 0x46, 0x44, 0x42,
  0x40, 0x3e, 0x3c, 0x3a, 0x38, 0x36, 0x34, 0x32, 0x30, 0x2e, 0x2c, 0x2a,
  0x28, 0x26, 0x24, 0x22, 0x20, 0x1e, 0x1c, 0x1a, 0x18, 0x16, 0x14, 0x12,
  0x10, 0x0e, 0x0c, 0x0a, 0x08, 0x06, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
  0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
  0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
  0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
  0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
  0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
  0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b,
  0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
  0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83,
  0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
  0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b,
  0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
  0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
  0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
  0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb,
  0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
  0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3,
  0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
  0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb,
  0xfc, 0xfd, 0xfe, 0xff
};
#endif
#endif


#ifdef INCLUDE_BLEH_REG_HELPER
#ifndef BLEH_REG_HELPER
#define BLEH_REG_HELPER
enum BlehRegisterAddresses : unsigned char {
  BLEH_ADDR_CHAN1FREQHIGH = 0,
  BLEH_ADDR_CHAN1FREQLOW = 1,
  BLEH_ADDR_CHAN2FREQHIGH = 2,
  BLEH_ADDR_CHAN2FREQLOW = 3,
  BLEH_ADDR_CHAN1STATE = 4,
  BLEH_ADDR_CHAN2STATE = 5,
  BLEH_ADDR_CHAN1NOISEFREQ = 6,
  BLEH_ADDR_CHAN2NOISEFREQ = 7
};
#endif
#endif

#ifndef _BLEHSYS
#define _BLEHSYS

#include <stdint.h>
#include <string.h>

#define CHANFREQ(c) (regSpace[0+c*2]<<8)|regSpace[1+c*2]
#define CHANSTATE(c) (regSpace[4+c])
#define CHANNOISEEN(c) CHANSTATE(c)&0x80
#define CHANWAVEEN(c) (CHANSTATE(c))&0x40
#define CHANPMEN(c) (CHANSTATE(c))&0x20
#define CHANwAVENUM(c) (CHANSTATE(c)>>3)&3
#define CHANVOLUME(c) (CHANSTATE(c))&7
#define NOISEFREQ(c) (regSpace[6+c])

class blehSys {
  uint8_t *rom;
  uint8_t regSpace[8];
  struct {
    uint8_t wavePos, curWave;
    uint16_t phase;

    uint16_t noise;
    uint8_t noisePhase;

    uint8_t state;
    uint8_t output;
  } blehChannel[2];

  uint16_t output;

  uint8_t getWaveSample(uint8_t wave, uint8_t pos) {
    if (!rom) return pos;
    return rom[wave * 256 + pos];
  }

public:
  void setROM(unsigned char *data) {
    rom=data;
  }
  void write(uint8_t addr, uint8_t data) {
    regSpace[addr]=data;
  }
  void reset() {
    memset(blehChannel, 0, sizeof(blehChannel));
    memset(regSpace, 0, sizeof(regSpace));
    output=0;
  }
  void tick() {
    for (int i=0; i<2; i++) {
#define C blehChannel[i]
      // advance wave
      C.phase+=CHANFREQ(i);
      C.wavePos = C.phase>>8;
      // advance noise
      uint8_t n = C.noisePhase;
      C.noisePhase+=NOISEFREQ(i);
      if (n>C.noisePhase) { // overflow
        C.noise=9*C.noise+1;
      }
      if (CHANPMEN(1-i)) { // other ch pm
        C.wavePos += blehChannel[1-i].output;
      }
      C.curWave = getWaveSample(CHANwAVENUM(i),C.wavePos);
      if (CHANWAVEEN(i)) {
        C.output = C.curWave;
        if (CHANNOISEEN(i)) C.output &= C.noise>>8;
      } else {
        if (CHANNOISEEN(i)) C.output = C.noise>>8;
      }
      C.output>>=CHANVOLUME(i);
#undef C
    }
    output = (CHANPMEN(0)?0:blehChannel[0].output) + (CHANPMEN(1)?0:blehChannel[1].output);
  }
  uint16_t getOutput() {
    return output;
  }
#ifdef INCLUDE_BLEH_EXTRA_FUNCTIONS
#ifndef BLEH_EXTRA_FUNCTIONS
#define BLEH_EXTRA_FUNCTIONS
  uint8_t getChanOutput(uint8_t c) {
    return (CHANPMEN(c)?0:blehChannel[c].output);
  }
  unsigned char* getRegSpace() {
    return regSpace;
  }
#endif
#endif
  blehSys() {
    rom=NULL;
    reset();
  }
};

#undef CHANFREQ
#undef CHANSTATE
#undef CHANNOISEEN
#undef CHANWAVEEN
#undef CHANPMEN
#undef CHANwAVENUM
#undef CHANVOLUME
#undef NOISEFREQ

#endif // BLEHSYS
